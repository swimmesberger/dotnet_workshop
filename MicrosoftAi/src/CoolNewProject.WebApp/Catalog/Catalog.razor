@page "/"
@inject NavigationManager Nav
@inject CatalogService CatalogService
@attribute [StreamRendering]

<PageTitle>Northern Mountains</PageTitle>
<SectionContent SectionName="page-header-title">Ready for a new adventure?</SectionContent>
<SectionContent SectionName="page-header-subtitle">Start the season with the latest in clothing and equipment.</SectionContent>

<div class="catalog-container">
    <form class="catalog-search-bar-container" method="get">
        <InputText name="q" class="catalog-search-bar" placeholder="Search..." type="search" @bind-Value="SearchText" />
        <button type="submit">Submit</button>
    </form>
    <hr/>
    <div class="catalog">
        <CatalogSearch BrandId="@BrandId" ItemTypeId="@ItemTypeId"/>

        @if (_catalogResult is null) {
            <p>Loading...</p>
        } else {
            <div>
                <div class="catalog-items">
                    @foreach (var item in _catalogResult.Data) {
                        <CatalogListItem Item="@item"/>
                    }
                </div>

                <div class="page-links">
                    @foreach (var pageIndex in GetVisiblePageIndexes(_catalogResult)) {
                        <NavLink ActiveClass="active-page" Match="@NavLinkMatch.All" href="@Nav.GetUriWithQueryParameter("page", pageIndex == 1 ? null : pageIndex)">@pageIndex</NavLink>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    private const int PageSize = 9;

    private CatalogResult? _catalogResult;

    [SupplyParameterFromQuery]
    public int? Page { get; set; }

    [SupplyParameterFromQuery(Name = "brand")]
    public int? BrandId { get; set; }

    [SupplyParameterFromQuery(Name = "type")]
    public int? ItemTypeId { get; set; }

    [SupplyParameterFromQuery(Name = "q")]
    public string? SearchText { get; set; }

    protected override async Task OnInitializedAsync() {
        await RefreshData();
    }

    protected void HandleSearchSubmit() {
        Nav.NavigateTo(Nav.GetUriWithQueryParameters(new Dictionary<string, object?>() {
            { "page", null },
            { "q", SearchText }
        }));
    }

    private async Task RefreshData(CancellationToken cancellationToken = default) {
        _catalogResult = await CatalogService.GetCatalogItems(
            Page.GetValueOrDefault(1) - 1,
            PageSize,
            BrandId,
            ItemTypeId,
            SearchText, cancellationToken);
    }

    private static IEnumerable<int> GetVisiblePageIndexes(CatalogResult result) {
        return Enumerable.Range(1, (int)Math.Ceiling(1.0 * result.Count / PageSize));
    }
}
